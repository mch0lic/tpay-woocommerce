<?php

namespace Tpay\Helpers;

use WC_Data_Store;
use WC_Shipping_Zone;

class ShippingHelper
{
    /**
     * @throws
     *
     * @return array
     */
    public function shipping_methods()
    {
        // Since this is expensive, we only want to do it if we're actually on the settings page.
        if (!$this->is_accessing_settings()) {
            return [];
        }

        $data_store = WC_Data_Store::load('shipping-zone');
        $raw_zones = $data_store->get_zones();

        foreach ($raw_zones as $raw_zone) {
            $zones[] = new WC_Shipping_Zone($raw_zone);
        }

        $zones[] = new WC_Shipping_Zone(0);

        $options = [];
        foreach (WC()->shipping()->load_shipping_methods() as $method) {
            $options[$method->get_method_title()] = [];

            // Translators: %1$s shipping method name.
            $options[$method->get_method_title()][$method->id] = sprintf(__(
                'Any &quot;%1$s&quot; method',
                'woocommerce'
            ), $method->get_method_title());

            foreach ($zones as $zone) {
                $shipping_method_instances = $zone->get_shipping_methods();

                foreach ($shipping_method_instances as $shipping_method_instance_id => $shipping_method_instance) {
                    if ($shipping_method_instance->id !== $method->id) {
                        continue;
                    }

                    $option_id = $shipping_method_instance->get_rate_id();

                    // Translators: %1$s shipping method title, %2$s shipping method id.
                    $option_instance_title = sprintf(
                        __('%1$s (#%2$s)', 'woocommerce'),
                        $shipping_method_instance->get_title(),
                        $shipping_method_instance_id
                    );

                    // Translators: %1$s zone name, %2$s shipping method instance name.
                    $option_title = sprintf(
                        __('%1$s &ndash; %2$s', 'woocommerce'),
                        $zone->get_id() ? $zone->get_zone_name() : __('Other locations', 'woocommerce'),
                        $option_instance_title
                    );

                    $options[$method->get_method_title()][$option_id] = $option_title;
                }
            }
        }

        return $options;
    }

    /**
     * Converts the chosen rate IDs generated by Shipping Methods to a canonical 'method_id:instance_id' format.
     * Copy from COD
     *
     * @param array $order_shipping_items array of WC_Order_Item_Shipping objects
     *
     * @return array $canonical_rate_ids    rate IDs in a canonical format
     */
    public function get_canonical_order_shipping_item_rate_ids($order_shipping_items)
    {
        $canonical_rate_ids = [];

        foreach ($order_shipping_items as $order_shipping_item) {
            $canonical_rate_ids[] = $order_shipping_item->get_method_id().':'.$order_shipping_item->get_instance_id();
        }

        return $canonical_rate_ids;
    }

    /**
     * Converts the chosen rate IDs generated by Shipping Methods to a canonical 'method_id:instance_id' format.
     * Copy from COD
     *
     * @param array $chosen_package_rate_ids Rate IDs as generated by shipping methods. Can be anything if a shipping method doesn't honor WC conventions.
     *
     * @return array $canonical_rate_ids  rate IDs in a canonical format
     */
    public function get_canonical_package_rate_ids($chosen_package_rate_ids)
    {
        $shipping_packages = WC()->shipping()->get_packages();
        $canonical_rate_ids = [];

        if (!empty($chosen_package_rate_ids) && is_array($chosen_package_rate_ids)) {
            foreach ($chosen_package_rate_ids as $package_key => $chosen_package_rate_id) {
                if (!empty($shipping_packages[$package_key]['rates'][$chosen_package_rate_id])) {
                    $chosen_rate = $shipping_packages[$package_key]['rates'][$chosen_package_rate_id];
                    $canonical_rate_ids[] = $chosen_rate->get_method_id().':'.$chosen_rate->get_instance_id();
                }
            }
        }

        return $canonical_rate_ids;
    }

    /**
     * Indicates whether a rate exists in an array of canonically-formatted rate IDs that activates this gateway.
     *
     * @param array $rate_ids rate ids to check
     *
     * @return array
     */
    public function get_matching_rates($rate_ids, $enable_for_shipping)
    {
        // First, match entries in 'method_id:instance_id' format. Then, match entries in 'method_id' format by stripping off the instance ID from the candidates.
        return array_unique(array_merge(
            array_intersect($enable_for_shipping, $rate_ids),
            array_intersect(
                $enable_for_shipping,
                array_unique(array_map('wc_get_string_before_colon', $rate_ids))
            )
        ));
    }

    /**
     * Checks to see whether or not the admin settings are being accessed by the current request.
     * Copy from COD module
     *
     * @return bool
     */
    private function is_accessing_settings()
    {
        if (is_admin()) {
            if (!isset($_REQUEST['page']) || 'wc-settings' !== $_REQUEST['page']) {
                return false;
            }

            return !(!isset($_REQUEST['tab']) || 'checkout' !== $_REQUEST['tab']);
        }

        if (defined('REST_REQUEST') && REST_REQUEST) {
            global $wp;
            if (isset($wp->query_vars['rest_route']) && false !== strpos(
                $wp->query_vars['rest_route'],
                '/payment_gateways'
            )) {
                return true;
            }
        }

        return false;
    }
}
